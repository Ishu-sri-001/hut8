'use client'
import React, { useRef, useEffect, Suspense } from 'react';
import { Canvas, useFrame, useLoader } from '@react-three/fiber';
import { OrbitControls, useGLTF, Environment, Html } from '@react-three/drei';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import * as THREE from 'three';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';
import { degToRad } from 'three/src/math/MathUtils';
import { useThree } from '@react-three/fiber';
import { useTexture } from '@react-three/drei';
import {
  EffectComposer,
  ChromaticAberration,
} from "@react-three/postprocessing";
import { Vector2 } from "three";




gsap.registerPlugin(ScrollTrigger);

// Configure Draco loader
const dracoLoader = new DRACOLoader();
dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');

function Model({ url, textures = {}, initialOpacity = 1, rotation, opacity, position, scale = 1, showHtmlMarkers = false }) {
  const group = useRef();
  const gltf = useGLTF(url, true, true, (loader) => {
    loader.setDRACOLoader(dracoLoader);
  });

  const textureUrls = Object.values(textures);
  const loadedTextureArray = useTexture(textureUrls.length > 0 ? textureUrls : []);
  
  const loadedTextures = {};
  const textureKeys = Object.keys(textures);
  textureKeys.forEach((key, index) => {
    loadedTextures[key] = Array.isArray(loadedTextureArray) ? loadedTextureArray[index] : loadedTextureArray;
  });

  useEffect(() => {
    if (group.current) {
      group.current.traverse((child) => {
        if (child.isMesh) {
          child.material = child.material.clone();
          child.material.transparent = true;
          child.material.opacity = initialOpacity;
          child.material.depthTest = true;
          child.material.side = THREE.DoubleSide;
          child.material.needsUpdate = true;
          child.renderOrder = 1; // ensure consistent render order

          // Assign texture if available
          if (loadedTextures[child.name]) {
            const tex = loadedTextures[child.name].clone();
            tex.wrapS = THREE.ClampToEdgeWrapping;
            tex.wrapT = THREE.ClampToEdgeWrapping;
            tex.colorSpace = THREE.SRGBColorSpace;
            tex.needsUpdate = true;
            child.material.map = tex;
          }
        }
      });
    }
  }, [initialOpacity, loadedTextures, gltf]);

  useFrame(() => {
    if (group.current) {
      group.current.rotation.set(rotation.current.x, rotation.current.y, rotation.current.z);
      group.current.position.set(position.current.x, position.current.y, position.current.z);
      group.current.scale.set(scale, scale, scale);

      group.current.traverse((child) => {
        if (child.isMesh) {
          const mat = child.material;
          const targetOpacity = opacity.current;
          if (mat.opacity !== targetOpacity) {
            mat.opacity = targetOpacity;
            // dynamically control depthWrite based on opacity
            mat.depthWrite = targetOpacity >= 0.99;
            mat.needsUpdate = true;
          }
        }
      });
    }
  });

  return (
    <group ref={group}>
      <primitive object={gltf.scene} />
      
      {showHtmlMarkers && opacity.current > 0.1 && (
        <>
      
         {/* windmills */}
          <Html position={[-5, 3.5, 15.5]} distanceFactor={10} center>
            
          <div className='p-[0.7vw] bg-gray-700 rounded-full'>
            <svg  width="26" height="26" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-77fed22a=""><path d="M7.66634 13.3333C7.11079 13.3333 6.63856 13.1389 6.24967 12.75C5.86079 12.3611 5.66634 11.8889 5.66634 11.3333H6.99967C6.99967 11.5222 7.06356 11.6806 7.19134 11.8083C7.31912 11.9361 7.47745 12 7.66634 12C7.85523 12 8.01356 11.9361 8.14134 11.8083C8.26912 11.6806 8.33301 11.5222 8.33301 11.3333C8.33301 11.1444 8.26912 10.9861 8.14134 10.8583C8.01356 10.7306 7.85523 10.6667 7.66634 10.6667H1.33301V9.33333H7.66634C8.2219 9.33333 8.69412 9.52778 9.08301 9.91667C9.4719 10.3056 9.66634 10.7778 9.66634 11.3333C9.66634 11.8889 9.4719 12.3611 9.08301 12.75C8.69412 13.1389 8.2219 13.3333 7.66634 13.3333ZM1.33301 6.66667V5.33333H10.333C10.6219 5.33333 10.8608 5.23889 11.0497 5.05C11.2386 4.86111 11.333 4.62222 11.333 4.33333C11.333 4.04444 11.2386 3.80556 11.0497 3.61667C10.8608 3.42778 10.6219 3.33333 10.333 3.33333C10.0441 3.33333 9.80523 3.42778 9.61634 3.61667C9.42745 3.80556 9.33301 4.04444 9.33301 4.33333H7.99967C7.99967 3.67778 8.22467 3.125 8.67467 2.675C9.12467 2.225 9.67745 2 10.333 2C10.9886 2 11.5413 2.225 11.9913 2.675C12.4413 3.125 12.6663 3.67778 12.6663 4.33333C12.6663 4.98889 12.4413 5.54167 11.9913 5.99167C11.5413 6.44167 10.9886 6.66667 10.333 6.66667H1.33301ZM12.333 12V10.6667C12.6219 10.6667 12.8608 10.5722 13.0497 10.3833C13.2386 10.1944 13.333 9.95555 13.333 9.66667C13.333 9.37778 13.2386 9.13889 13.0497 8.95C12.8608 8.76111 12.6219 8.66667 12.333 8.66667H1.33301V7.33333H12.333C12.9886 7.33333 13.5413 7.55833 13.9913 8.00833C14.4413 8.45833 14.6663 9.01111 14.6663 9.66667C14.6663 10.3222 14.4413 10.875 13.9913 11.325C13.5413 11.775 12.9886 12 12.333 12Z" fill="white" data-v-77fed22a=""></path></svg>
                </div>
          </Html>

            {/* sun */}
          <Html position={[0,1.5,14.5]} distanceFactor={10} center>
            <div className='p-[0.8vw] rounded-full bg-gray-700'>
                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-77fed22a=""><g clipPath="url(#clip0_3248_4201)" data-v-77fed22a=""><path d="M8.00033 10.0013C8.55588 10.0013 9.0281 9.80686 9.41699 9.41797C9.80588 9.02908 10.0003 8.55686 10.0003 8.0013C10.0003 7.44575 9.80588 6.97352 9.41699 6.58464C9.0281 6.19575 8.55588 6.0013 8.00033 6.0013C7.44477 6.0013 6.97255 6.19575 6.58366 6.58464C6.19477 6.97352 6.00033 7.44575 6.00033 8.0013C6.00033 8.55686 6.19477 9.02908 6.58366 9.41797C6.97255 9.80686 7.44477 10.0013 8.00033 10.0013ZM8.00033 11.3346C7.0781 11.3346 6.29199 11.0096 5.64199 10.3596C4.99199 9.70964 4.66699 8.92352 4.66699 8.0013C4.66699 7.07908 4.99199 6.29297 5.64199 5.64297C6.29199 4.99297 7.0781 4.66797 8.00033 4.66797C8.92255 4.66797 9.70866 4.99297 10.3587 5.64297C11.0087 6.29297 11.3337 7.07908 11.3337 8.0013C11.3337 8.92352 11.0087 9.70964 10.3587 10.3596C9.70866 11.0096 8.92255 11.3346 8.00033 11.3346ZM3.33366 8.66797H0.666992V7.33464H3.33366V8.66797ZM15.3337 8.66797H12.667V7.33464H15.3337V8.66797ZM7.33366 3.33464V0.667969H8.66699V3.33464H7.33366ZM7.33366 15.3346V12.668H8.66699V15.3346H7.33366ZM4.26699 5.16797L2.58366 3.5513L3.53366 2.56797L5.13366 4.23464L4.26699 5.16797ZM12.467 13.4346L10.8503 11.7513L11.7337 10.8346L13.417 12.4513L12.467 13.4346ZM10.8337 4.26797L12.4503 2.58464L13.4337 3.53464L11.767 5.13464L10.8337 4.26797ZM2.56699 12.468L4.25033 10.8513L5.16699 11.7346L3.55033 13.418L2.56699 12.468Z" fill="white" data-v-77fed22a=""></path></g> <defs data-v-77fed22a=""><clipPath id="clip0_3248_4201" data-v-77fed22a=""><rect width="16" height="16" fill="white" data-v-77fed22a=""></rect></clipPath></defs></svg>
            </div>
          </Html>

            {/* 2 circles */}
           <Html position={[-13,2.7,8]} distanceFactor={10} center >
            <div className='p-[0.8vw] rounded-full bg-gray-700'>
                <svg width="36" height="36" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-77fed22a=""><path d="M3.99967 14.332C3.35523 14.332 2.80523 14.1043 2.34967 13.6487C1.89412 13.1931 1.66634 12.6431 1.66634 11.9987C1.66634 11.3543 1.89412 10.8043 2.34967 10.3487C2.80523 9.89314 3.35523 9.66536 3.99967 9.66536C4.64412 9.66536 5.19412 9.89314 5.64967 10.3487C6.10523 10.8043 6.33301 11.3543 6.33301 11.9987C6.33301 12.2431 6.2969 12.4793 6.22467 12.707C6.15245 12.9348 6.04412 13.1487 5.89967 13.3487V12.8987C6.23301 13.0431 6.57745 13.1515 6.93301 13.2237C7.28856 13.2959 7.64412 13.332 7.99967 13.332C9.48856 13.332 10.7497 12.8154 11.783 11.782C12.8163 10.7487 13.333 9.48759 13.333 7.9987H14.6663C14.6663 8.92092 14.4913 9.78759 14.1413 10.5987C13.7913 11.4098 13.3163 12.1154 12.7163 12.7154C12.1163 13.3154 11.4108 13.7904 10.5997 14.1404C9.78856 14.4904 8.9219 14.6654 7.99967 14.6654C7.49967 14.6654 7.01079 14.6126 6.53301 14.507C6.05523 14.4015 5.59412 14.2431 5.14967 14.032C4.9719 14.132 4.78579 14.207 4.59134 14.257C4.3969 14.307 4.19967 14.332 3.99967 14.332ZM3.99967 12.9987C4.27745 12.9987 4.51356 12.9015 4.70801 12.707C4.90245 12.5126 4.99967 12.2765 4.99967 11.9987C4.99967 11.7209 4.90245 11.4848 4.70801 11.2904C4.51356 11.0959 4.27745 10.9987 3.99967 10.9987C3.7219 10.9987 3.48579 11.0959 3.29134 11.2904C3.0969 11.4848 2.99967 11.7209 2.99967 11.9987C2.99967 12.2765 3.0969 12.5126 3.29134 12.707C3.48579 12.9015 3.7219 12.9987 3.99967 12.9987ZM7.99967 10.332C7.35523 10.332 6.80523 10.1043 6.34967 9.6487C5.89412 9.19314 5.66634 8.64314 5.66634 7.9987C5.66634 7.35425 5.89412 6.80425 6.34967 6.3487C6.80523 5.89314 7.35523 5.66536 7.99967 5.66536C8.64412 5.66536 9.19412 5.89314 9.64967 6.3487C10.1052 6.80425 10.333 7.35425 10.333 7.9987C10.333 8.64314 10.1052 9.19314 9.64967 9.6487C9.19412 10.1043 8.64412 10.332 7.99967 10.332ZM1.33301 7.9987C1.33301 7.07648 1.50801 6.20981 1.85801 5.3987C2.20801 4.58759 2.68301 3.88203 3.28301 3.28203C3.88301 2.68203 4.58856 2.20703 5.39967 1.85703C6.21079 1.50703 7.07745 1.33203 7.99967 1.33203C8.49967 1.33203 8.98856 1.38481 9.46634 1.49036C9.94412 1.59592 10.4052 1.75425 10.8497 1.96536C11.0275 1.86536 11.2136 1.79036 11.408 1.74036C11.6025 1.69036 11.7997 1.66536 11.9997 1.66536C12.6441 1.66536 13.1941 1.89314 13.6497 2.3487C14.1052 2.80425 14.333 3.35425 14.333 3.9987C14.333 4.64314 14.1052 5.19314 13.6497 5.6487C13.1941 6.10425 12.6441 6.33203 11.9997 6.33203C11.3552 6.33203 10.8052 6.10425 10.3497 5.6487C9.89412 5.19314 9.66634 4.64314 9.66634 3.9987C9.66634 3.75425 9.70245 3.51814 9.77467 3.29036C9.8469 3.06259 9.95523 2.8487 10.0997 2.6487V3.0987C9.76634 2.95425 9.4219 2.84592 9.06634 2.7737C8.71078 2.70148 8.35523 2.66536 7.99967 2.66536C6.51079 2.66536 5.24967 3.18203 4.21634 4.21536C3.18301 5.2487 2.66634 6.50981 2.66634 7.9987H1.33301ZM11.9997 4.9987C12.2775 4.9987 12.5136 4.90148 12.708 4.70703C12.9025 4.51259 12.9997 4.27648 12.9997 3.9987C12.9997 3.72092 12.9025 3.48481 12.708 3.29036C12.5136 3.09592 12.2775 2.9987 11.9997 2.9987C11.7219 2.9987 11.4858 3.09592 11.2913 3.29036C11.0969 3.48481 10.9997 3.72092 10.9997 3.9987C10.9997 4.27648 11.0969 4.51259 11.2913 4.70703C11.4858 4.90148 11.7219 4.9987 11.9997 4.9987Z" fill="white" data-v-77fed22a=""></path></svg>
            </div>
          </Html>


            {/* capacitor */}
          <Html position={[-4.2,2.5,5.5]} distanceFactor={10} center>
            <div className='p-[0.8vw] rounded-full bg-gray-700'>
                <svg width="35" height="35" viewBox="0 0 16 9" fill="none" xmlns="http://www.w3.org/2000/svg" data-v-77fed22a=""><path d="M2.66667 4.80751C2.91706 4.80751 3.12363 4.85133 3.28639 4.93897C3.44914 5.0266 3.61815 5.1205 3.79343 5.22066C3.9687 5.32081 4.17527 5.41471 4.41315 5.50235C4.65102 5.58998 4.95774 5.6338 5.33333 5.6338C5.73396 5.6338 6.05321 5.58998 6.29108 5.50235C6.52895 5.41471 6.72926 5.32081 6.89202 5.22066C7.05477 5.1205 7.21753 5.0266 7.38028 4.93897C7.54304 4.85133 7.74961 4.80751 8 4.80751C8.25039 4.80751 8.45696 4.85133 8.61972 4.93897C8.78247 5.0266 8.95149 5.1205 9.12676 5.22066C9.30204 5.32081 9.50861 5.41471 9.74648 5.50235C9.98435 5.58998 10.2911 5.6338 10.6667 5.6338C11.0673 5.6338 11.3865 5.58998 11.6244 5.50235C11.8623 5.41471 12.0626 5.32081 12.2254 5.22066C12.3881 5.1205 12.5509 5.0266 12.7136 4.93897C12.8764 4.85133 13.0829 4.80751 13.3333 4.80751C13.5837 4.80751 13.7903 4.85133 13.9531 4.93897C14.1158 5.0266 14.2848 5.1205 14.4601 5.22066C14.6354 5.32081 14.8419 5.41471 15.0798 5.50235C15.3177 5.58998 15.6244 5.6338 16 5.6338V4.01878C15.7496 4.01878 15.543 3.98122 15.3803 3.9061C15.2175 3.83099 15.0485 3.73709 14.8732 3.62441C14.698 3.51174 14.4914 3.41784 14.2535 3.34272C14.0156 3.26761 13.7089 3.23005 13.3333 3.23005C12.9327 3.23005 12.6135 3.26761 12.3756 3.34272C12.1377 3.41784 11.9374 3.51174 11.7746 3.62441C11.6119 3.73709 11.4491 3.83099 11.2864 3.9061C11.1236 3.98122 10.9171 4.01878 10.6667 4.01878C10.4163 4.01878 10.2097 3.98122 10.0469 3.9061C9.88419 3.83099 9.71518 3.73709 9.53991 3.62441C9.36463 3.51174 9.15806 3.41784 8.92019 3.34272C8.68231 3.26761 8.37559 3.23005 8 3.23005C7.59937 3.23005 7.28013 3.26761 7.04225 3.34272C6.80438 3.41784 6.60407 3.51174 6.44131 3.62441C6.27856 3.73709 6.11581 3.83099 5.95305 3.9061C5.7903 3.98122 5.58373 4.01878 5.33333 4.01878C5.08294 4.01878 4.87637 3.98122 4.71361 3.9061C4.55086 3.83099 4.38185 3.73709 4.20657 3.62441C4.0313 3.51174 3.82473 3.41784 3.58685 3.34272C3.34898 3.26761 3.04226 3.23005 2.66667 3.23005C2.26604 3.23005 1.94679 3.26761 1.70892 3.34272C1.47105 3.41784 1.27074 3.51174 1.10798 3.62441C0.945226 3.73709 0.782474 3.83099 0.619718 3.9061C0.456963 3.98122 0.250393 4.01878 0 4.01878V5.6338C0.375589 5.6338 0.682315 5.58998 0.920188 5.50235C1.15806 5.41471 1.36463 5.32081 1.53991 5.22066C1.71518 5.1205 1.89045 5.0266 2.06573 4.93897C2.241 4.85133 2.44131 4.80751 2.66667 4.80751ZM13.3333 6.42254C12.9577 6.42254 12.651 6.46009 12.4131 6.53521C12.1753 6.61033 11.9687 6.70423 11.7934 6.8169C11.6182 6.92958 11.4491 7.02347 11.2864 7.09859C11.1236 7.17371 10.9171 7.21127 10.6667 7.21127C10.4413 7.21127 10.241 7.17371 10.0657 7.09859C9.89045 7.02347 9.72144 6.92958 9.55869 6.8169C9.39593 6.70423 9.18936 6.61033 8.93897 6.53521C8.68857 6.46009 8.37559 6.42254 8 6.42254C7.62441 6.42254 7.31769 6.46009 7.07981 6.53521C6.84194 6.61033 6.63537 6.70423 6.46009 6.8169C6.28482 6.92958 6.11581 7.02347 5.95305 7.09859C5.7903 7.17371 5.58373 7.21127 5.33333 7.21127C5.08294 7.21127 4.87637 7.17371 4.71361 7.09859C4.55086 7.02347 4.38811 6.92958 4.22535 6.8169C4.0626 6.70423 3.86229 6.61033 3.62441 6.53521C3.38654 6.46009 3.06729 6.42254 2.66667 6.42254C2.26604 6.42254 1.94679 6.46009 1.70892 6.53521C1.47105 6.61033 1.27074 6.70423 1.10798 6.8169C0.945226 6.92958 0.782474 7.02347 0.619718 7.09859C0.456963 7.17371 0.250393 7.21127 0 7.21127V8.82629C0.375589 8.82629 0.682315 8.78873 0.920188 8.71362C1.15806 8.6385 1.36463 8.5446 1.53991 8.43192C1.71518 8.31925 1.88419 8.22535 2.04695 8.15024C2.2097 8.07512 2.41627 8.03756 2.66667 8.03756C2.91706 8.03756 3.12363 8.07512 3.28639 8.15024C3.44914 8.22535 3.61189 8.31925 3.77465 8.43192C3.9374 8.5446 4.13771 8.6385 4.37559 8.71362C4.61346 8.78873 4.93271 8.82629 5.33333 8.82629C5.73396 8.82629 6.05321 8.78873 6.29108 8.71362C6.52895 8.6385 6.72926 8.5446 6.89202 8.43192C7.05477 8.31925 7.21753 8.22535 7.38028 8.15024C7.54304 8.07512 7.74961 8.03756 8 8.03756C8.25039 8.03756 8.45696 8.07512 8.61972 8.15024C8.78247 8.22535 8.95149 8.31925 9.12676 8.43192C9.30204 8.5446 9.50861 8.6385 9.74648 8.71362C9.98435 8.78873 10.2911 8.82629 10.6667 8.82629C11.0673 8.82629 11.3865 8.78873 11.6244 8.71362C11.8623 8.6385 12.0626 8.5446 12.2254 8.43192C12.3881 8.31925 12.5509 8.22535 12.7136 8.15024C12.8764 8.07512 13.0829 8.03756 13.3333 8.03756C13.5837 8.03756 13.7903 8.07512 13.9531 8.15024C14.1158 8.22535 14.2848 8.31925 14.4601 8.43192C14.6354 8.5446 14.8419 8.6385 15.0798 8.71362C15.3177 8.78873 15.6244 8.82629 16 8.82629V7.21127C15.7496 7.21127 15.543 7.17371 15.3803 7.09859C15.2175 7.02347 15.0548 6.92958 14.892 6.8169C14.7293 6.70423 14.529 6.61033 14.2911 6.53521C14.0532 6.46009 13.734 6.42254 13.3333 6.42254ZM2.66667 1.61502C2.91706 1.61502 3.12363 1.65258 3.28639 1.7277C3.44914 1.80282 3.61815 1.89671 3.79343 2.00939C3.9687 2.12207 4.17527 2.21596 4.41315 2.29108C4.65102 2.3662 4.95774 2.40376 5.33333 2.40376C5.73396 2.40376 6.05321 2.3662 6.29108 2.29108C6.52895 2.21596 6.72926 2.12207 6.89202 2.00939C7.05477 1.89671 7.21753 1.80282 7.38028 1.7277C7.54304 1.65258 7.74961 1.61502 8 1.61502C8.25039 1.61502 8.45696 1.65258 8.61972 1.7277C8.78247 1.80282 8.95149 1.89671 9.12676 2.00939C9.30204 2.12207 9.50861 2.21596 9.74648 2.29108C9.98435 2.3662 10.2911 2.40376 10.6667 2.40376C11.0673 2.40376 11.3865 2.3662 11.6244 2.29108C11.8623 2.21596 12.0626 2.12207 12.2254 2.00939C12.3881 1.89671 12.5509 1.80282 12.7136 1.7277C12.8764 1.65258 13.0829 1.61502 13.3333 1.61502C13.5837 1.61502 13.7903 1.65258 13.9531 1.7277C14.1158 1.80282 14.2848 1.89671 14.4601 2.00939C14.6354 2.12207 14.8419 2.21596 15.0798 2.29108C15.3177 2.3662 15.6244 2.40376 16 2.40376V0.826291C15.7496 0.826291 15.543 0.782473 15.3803 0.694836C15.2175 0.607198 15.0485 0.513303 14.8732 0.413146C14.698 0.312989 14.4914 0.219093 14.2535 0.131456C14.0156 0.043818 13.7089 0 13.3333 0C12.9327 0 12.6135 0.043818 12.3756 0.131456C12.1377 0.219093 11.9374 0.312989 11.7746 0.413146C11.6119 0.513303 11.4491 0.607198 11.2864 0.694836C11.1236 0.782473 10.9171 0.826291 10.6667 0.826291C10.4163 0.826291 10.2097 0.782473 10.0469 0.694836C9.88419 0.607198 9.71518 0.513303 9.53991 0.413146C9.36463 0.312989 9.15806 0.219093 8.92019 0.131456C8.68231 0.043818 8.37559 0 8 0C7.59937 0 7.28013 0.043818 7.04225 0.131456C6.80438 0.219093 6.60407 0.312989 6.44131 0.413146C6.27856 0.513303 6.11581 0.607198 5.95305 0.694836C5.7903 0.782473 5.58373 0.826291 5.33333 0.826291C5.08294 0.826291 4.87637 0.782473 4.71361 0.694836C4.55086 0.607198 4.38185 0.513303 4.20657 0.413146C4.0313 0.312989 3.82473 0.219093 3.58685 0.131456C3.34898 0.043818 3.04226 0 2.66667 0C2.26604 0 1.94679 0.043818 1.70892 0.131456C1.47105 0.219093 1.27074 0.312989 1.10798 0.413146C0.945226 0.513303 0.782474 0.607198 0.619718 0.694836C0.456963 0.782473 0.250393 0.826291 0 0.826291V2.40376C0.375589 2.40376 0.682315 2.3662 0.920188 2.29108C1.15806 2.21596 1.36463 2.12207 1.53991 2.00939C1.71518 1.89671 1.89045 1.80282 2.06573 1.7277C2.241 1.65258 2.44131 1.61502 2.66667 1.61502Z" fill="white" data-v-77fed22a=""></path></svg>
            </div>
          </Html>

        </>
      )}
    </group>
  );
}


function Scene() {
  const rotation1 = useRef({ x: degToRad(0), y: degToRad(-30), z: degToRad(0) });
  const position1 = useRef({ x: 10, y: -6, z: -43 });

  const rotation2 = useRef({ x: 0, y: degToRad(30), z: 0 });
  const position2 = useRef({ x: 0, y: 0, z: 0 });
  const opacity1 = useRef(1);
  const opacity2 = useRef(0);
  const { camera } = useThree();

  useEffect(() => {
    // Initial camera position
    camera.position.set(0, 5, -20);

    // Initial rotation (Euler angles in radians) - increased x rotation to look down more
    camera.rotation.set(degToRad(-43), degToRad(0), degToRad(0));

    camera.updateProjectionMatrix();

    // camera.lookAt(0, -30, 0);
  });

  useEffect(() => {
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: '.scroll-container',
        start: 'top 60%',
        end: 'bottom top',
        scrub: true,
        // markers: true,
      }
    });

    tl
    .to(position1.current, {
      z: `-=${5}`,
      x: `-=${20}`,
      // y: `+=${4}`,
      ease: 'none',
    })
    .to(rotation1.current, {
       y: `-=${degToRad(10)}`,
        // x: `-=${degToRad(5)}`,
      ease: 'none'
    },'<')

    .to(position1.current, {
            z: `-=${25}`,
            x: `-=${25}`,
            ease: 'none',
    })
    .to(position1.current, {
            z: `-=${25}`,
            x: `-=${25}`,
            ease: 'none',
    })

    .to(rotation1.current, {
         y: `+=${degToRad(10)}`,
         ease:'none',
    })
    .to(position1.current, {
            z: `+=${25}`,
            y: `+=${2}`,
            x: `-=${5}`,
            ease: 'none',
    }, '<')

   

    tl.to(opacity1, {
      current: 0,
      duration: 0.2,
      ease: 'none'
    })

    .to(camera.position, {
      z: 20,
      duration:0.05,
      ease: 'none',
      onUpdate: () => camera.updateProjectionMatrix()
    })
    .to(camera.rotation, {
      x: degToRad(-25),
      duration:0.05,
    
      ease: 'none',
      onUpdate: () => camera.updateProjectionMatrix()
    }, '<')

    // Second model: position animation
    tl.to(position2.current, {
      x: -12,
      y: 3,
      z: 16,
      ease: 'none'
    },'<');

    // Second model: fade in (starts after first model fades out)
    tl.to(opacity2, {
      current: 1,
      duration:0.2,
      ease: 'none'
    });

    // Second model: rotate while visible
    tl.to(position2.current, {
       z: `+=${8}`,
            y: `-=${2}`,
            x: `+=${5}`,
    })
    
    return () => {
      tl.kill();
      ScrollTrigger.getAll().forEach(st => st.kill());
    };
  }, []);

  

  return (
    <>
      <ambientLight intensity={7.5} />
      <directionalLight position={[10, 10, 5]} intensity={6.0} />
      <directionalLight position={[-10, -10, -5]} intensity={6.5} />
      
      <Suspense fallback={null}>
        {/* Replace these URLs with your actual model paths */}
        <Model
          url="/models/intro.glb"
          initialOpacity={1}
          rotation={rotation1}
          opacity={opacity1}
          position={position1}
          showHtmlMarkers={true}
          textures={{
            FLOOR_01: "/assets/texture/floor1.jpg",
            FLOOR_02: "/assets/texture/floor2.jpg",
            // GROUP_01: "/assets/texture/group01.jpg",
            // GROUP_02: "/assets/texture/group02.jpg",
            // GROUP_03: "/assets/texture/group03.jpg",
          }}
        />
        <Model 
          url="/models/blocks.glb" 
          textures={{
            Comp: "/assets/texture/blocks-texture.jpg"
          }}
          initialOpacity={0}
          rotation={rotation2}
          opacity={opacity2}
          position={position2}
          scale={3}
        />
         {/* <Environment preset="sunset" />  */}
      </Suspense>

      <EffectComposer>
        <ChromaticAberration
          offset={new Vector2(0.001, 0.001)}
          blendFunction={2}
        />
      </EffectComposer>
      
   
    </>
  );
}

export default function App() {
  return (
    <div style={{ width: '100%' }}>
      <div 
        className="scroll-container dark-section" 
        style={{ 
          height: '700vh',
          position: 'relative'
        }}
      >
        <div style={{ 
          position: 'sticky', 
          top: 0, 
          height: '100vh',
          width: '100%',
          zIndex: 1
        }}>
          <Canvas shadows camera={{ position: [0, 0, -15], fov: 50 }}>
            <Scene />
          </Canvas>
          
          <div style={{
            position: 'absolute',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            color: 'white',
            fontSize: '18px',
            textAlign: 'center',
            pointerEvents: 'none',
            zIndex: 10
          }}>
           
          </div>
        </div>
      </div>
      
   
      
    </div>
  );
}